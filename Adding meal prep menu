import tkinter as tk

class FitnessFillUpApp:
    def __init__(self, window):
        self.window = window
        self.window.title("Fitness Fill-up")
        
        # supposed to store User information???
        self.user_info = {}
        
        # Welcome Screen
        self.welcome_label = tk.Label(self.window, text="Welcome to the Fitness Fill-up App")
        self.welcome_label.pack()
        
        self.signup_button = tk.Button(self.window, text="Sign Up", command=self.signup)
        self.signup_button.pack()
        
        self.meal_prep_button = tk.Button(self.window, text="Meal Prep", command=self.open_meal_prep)
        self.meal_prep_button.pack()
        
        self.close_button = tk.Button(self.window, text="Close", command=self.window.quit)
        self.close_button.pack()

    def signup(self):
        # login Setup
        signup_window = tk.Toplevel(self.window)
        signup_window.title("User Profile Setup")
        
        # Personal information input
        age_label = tk.Label(signup_window, text="Age:")
        age_label.pack()
        age_entry = tk.Entry(signup_window)
        age_entry.pack()
        
        # Current weight
        current_weight_label = tk.Label(signup_window, text="Current Weight (lbs):")
        current_weight_label.pack()
        current_weight_entry = tk.Entry(signup_window)
        current_weight_entry.pack()
        
        # Desired weight
        target_weight_label = tk.Label(signup_window, text="Target Weight (lbs):")
        target_weight_label.pack()
        target_weight_entry = tk.Entry(signup_window)
        target_weight_entry.pack() 

        # Height
        height_label = tk.Label(signup_window, text="Height (In.):")
        height_label.pack()
        height_entry = tk.Entry(signup_window)
        height_entry.pack()

        # Desired amount of time
        time_frame_label = tk.Label(signup_window, text="Desired Time Frame (days):")
        time_frame_label.pack()
        time_frame_entry = tk.Entry(signup_window)
        time_frame_entry.pack()

        # Food preferences and allergies
        food_pref_label = tk.Label(signup_window, text="Food Preferences:")
        food_pref_label.pack()
        food_pref_entry = tk.Entry(signup_window)
        food_pref_entry.pack()

        allergies_label = tk.Label(signup_window, text="Allergies:")
        allergies_label.pack()
        allergies_entry = tk.Entry(signup_window)
        allergies_entry.pack()

        calculate_button = tk.Button(signup_window, text="Calculate Suggested Weight", command=self.calculate_weight_loss_goal)
        calculate_button.pack()
        
        suggested_weight_label = tk.Label(signup_window, text="")
        suggested_weight_label.pack()
        
    def calculate_weight_loss_goal(self):
        current_weight = float(current_weight_entry.get())
        height= float(height_entry.get())
        
        # Calculate BMI
        bmi = (current_weight / (height ** 2)) * 703
        
        # Define a healthy BMI range
        lower_bmi_range = 18.5
        upper_bmi_range = 24.9
        
        # Calculate target weight range
        lower_target_weight = lower_bmi_range * (height ** 2) / 703
        upper_target_weight = upper_bmi_range * (height ** 2) / 703
        
        # Suggests a weight loss goal within the healthy BMI range
        suggested_target_weight = (lower_target_weight + upper_target_weight) / 2
        
        # Displays the suggested weight loss goal
        suggested_weight_label.config(text=f"Your Suggested Target Weight is: {suggested_target_weight:.2f} lbs")
        
    def open_meal_prep(self):
        meal_prep_window = tk.Toplevel(self.window)
        meal_prep_window.title("Meal Prepping")
        meal_prep_app = MealPrepApp(meal_prep_window)

class MealPrepApp:
    def __init__(self, window):
        self.window = window
        self.window.title("Meal Prepping")
        
        # Dictionary to store daily meal plan
        self.daily_meal_plan = {"Breakfast": "", "Lunch": "", "Dinner": ""}

        # daily meal plan overview
        self.dashboard_frame = tk.Frame(self.window)
        self.dashboard_frame.pack()

        self.dashboard_label = tk.Label(self.dashboard_frame, text="Daily Meal Plan Overview")
        self.dashboard_label.pack()

        # displays for selected meals for each day
        self.breakfast_label = tk.Label(self.dashboard_frame, text="Breakfast:")
        self.breakfast_label.pack()
        self.breakfast_selected = tk.Label(self.dashboard_frame, text="")
        self.breakfast_selected.pack()

        self.lunch_label = tk.Label(self.dashboard_frame, text="Lunch:")
        self.lunch_label.pack()
        self.lunch_selected = tk.Label(self.dashboard_frame, text="")
        self.lunch_selected.pack()

        self.dinner_label = tk.Label(self.dashboard_frame, text="Dinner:")
        self.dinner_label.pack()
        self.dinner_selected = tk.Label(self.dashboard_frame, text="")
        self.dinner_selected.pack()

        #  add, remove, or modify meals
        self.modify_meal_button = tk.Button(self.dashboard_frame, text="Modify Meals", command=self.modify_meals)
        self.modify_meal_button.pack()

        #access to recipe database
        self.recipe_database_button = tk.Button(self.dashboard_frame, text="Access Recipe Database", command=self.access_recipe_database)
        self.recipe_database_button.pack()

        

    def modify_meals(self):
        #  add, remove, or modify meals for each day
        modify_meal_window = tk.Toplevel(self.window)
        modify_meal_window.title("Modify Meals")

        # select meal type
        meal_type_label = tk.Label(modify_meal_window, text="Select Meal Type:")
        meal_type_label.pack()
        self.selected_meal_type = tk.StringVar()
        meal_type_dropdown = tk.OptionMenu(modify_meal_window, self.selected_meal_type, *self.daily_meal_plan.keys())
        meal_type_dropdown.pack()

        # select meal from recipe database
        recipe_label = tk.Label(modify_meal_window, text="Select Meal from Recipe Database:")
        recipe_label.pack()
        self.selected_recipe = tk.StringVar()
        recipe_dropdown = tk.OptionMenu(modify_meal_window, self.selected_recipe, "Meal 1", "Meal 2", "Meal 3")  # Replace with actual recipe database
        recipe_dropdown.pack()

        # confirm meal selection currently does not work 
        confirm_button = tk.Button(modify_meal_window, text="Confirm", command=self.confirm_meal_selection)
        confirm_button.pack()

    def confirm_meal_selection(self):
        selected_meal_type = self.selected_meal_type.get()
        selected_recipe = self.selected_recipe.get()
        self.daily_meal_plan[selected_meal_type] = selected_recipe

if __name__ == "__main__":
    window = tk.Tk()
    fitness_app = FitnessFillUpApp(window)
    window.mainloop()
