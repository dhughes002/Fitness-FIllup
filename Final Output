import tkinter as tk
from tkinter import messagebox


class FitnessFillUpApp:
    def __init__(self, window):
        self.window = window
        self.window.title("Fitness Fill-up")
        
        # supposed to store User information???
        self.user_info = {}
        
        # Welcome Screen
        self.welcome_label = tk.Label(self.window, text="Welcome to the Fitness Fill-up App")
        self.welcome_label.pack()
        
        self.signup_button = tk.Button(self.window, text="Sign Up", command=self.signup)
        self.signup_button.pack()
        
        self.meal_prep_button = tk.Button(self.window, text="Meal Prep", command=self.open_meal_prep)
        self.meal_prep_button.pack()
        
        self.close_button = tk.Button(self.window, text="Close", command=self.window.quit)
        self.close_button.pack()

    def signup(self):
        # login Setup
        self.signup_window = tk.Toplevel(self.window)
        self.signup_window.title("User Profile Setup")
        
        # Personal information input
        age_label = tk.Label(self.signup_window, text="Age:")
        age_label.pack()
        self.age_entry = tk.Entry(self.signup_window)
        self.age_entry.pack()
        
        # Current weight
        current_weight_label = tk.Label(self.signup_window, text="Current Weight (lbs):")
        current_weight_label.pack()
        self.current_weight_entry = tk.Entry(self.signup_window)
        self.current_weight_entry.pack()
        

        # Height
        height_label = tk.Label(self.signup_window, text="Height (In.):")
        height_label.pack()
        self.height_entry = tk.Entry(self.signup_window)
        self.height_entry.pack()

        # Desired amount of time
        time_frame_label = tk.Label(self.signup_window, text="Desired Time Frame (days):")
        time_frame_label.pack()
        self.time_frame_entry = tk.Entry(self.signup_window)
        self.time_frame_entry.pack()

        calculate_button = tk.Button(self.signup_window, text="Calculate Suggested Weight", command=self.calculate_weight_loss_goal)
        calculate_button.pack()
        
        self.suggested_weight_label = tk.Label(self.signup_window, text="")
        self.suggested_weight_label.pack()

        # Exit button
        exit_button = tk.Button(self.signup_window, text="Exit", command=self.signup_window.destroy)
        exit_button.pack()
        
    def calculate_weight_loss_goal(self):
        try:
            age = int(self.age_entry.get())
            current_weight = float(self.current_weight_entry.get())
            height = float(self.height_entry.get())
            time_frame = int(self.time_frame_entry.get())
            
            if age <= 0 or current_weight <= 0 or height <= 0 or time_frame <= 0:
                messagebox.showerror("Error", "Please enter valid positive values for age, weight, height, and time frame.")
                return
            
            # Calculate BMI
            bmi = (current_weight / (height ** 2)) * 703
            
            # Define a healthy BMI range
            lower_bmi_range = 18.5
            upper_bmi_range = 24.9
            
            # Calculate target weight range
            lower_target_weight = lower_bmi_range * (height ** 2) / 703
            upper_target_weight = upper_bmi_range * (height ** 2) / 703
            
            # Suggests a weight loss goal within the healthy BMI range
            suggested_target_weight = (lower_target_weight + upper_target_weight) / 2
            
            # Displays the suggested weight loss goal
            self.suggested_weight_label.config(text=f"Your Suggested Target Weight is: {suggested_target_weight:.2f} lbs")
        except ValueError:
            messagebox.showerror("Error", "Please enter valid numeric values for age, weight, height, and time frame.")
            return
        
    def open_meal_prep(self):
        meal_prep_window = tk.Toplevel(self.window)
        meal_prep_window.title("Meal Prepping")
        meal_prep_app = MealPrepApp(meal_prep_window)

class MealPrepApp:
    def __init__(self, window):
        self.window = window
        self.window.title("Meal Prepping")

        # Dictionary to store daily meal plan
        self.daily_meal_plan = {"Breakfast": "", "Lunch": "", "Dinner": ""}

        # daily meal plan overview
        self.dashboard_frame = tk.Frame(self.window)
        self.dashboard_frame.pack()

        self.dashboard_label = tk.Label(self.dashboard_frame, text="Daily Meal Plan Overview")
        self.dashboard_label.pack()

        # displays for selected meals for each day
        self.breakfast_label = tk.Label(self.dashboard_frame, text="Breakfast:")
        self.breakfast_label.pack()
        self.breakfast_selected = tk.Label(self.dashboard_frame, text="")
        self.breakfast_selected.pack()

        self.lunch_label = tk.Label(self.dashboard_frame, text="Lunch:")
        self.lunch_label.pack()
        self.lunch_selected = tk.Label(self.dashboard_frame, text="")
        self.lunch_selected.pack()

        self.dinner_label = tk.Label(self.dashboard_frame, text="Dinner:")
        self.dinner_label.pack()
        self.dinner_selected = tk.Label(self.dashboard_frame, text="")
        self.dinner_selected.pack()

        #  add, remove, or modify meals
        self.modify_meal_button = tk.Button(self.dashboard_frame, text="Modify Meals", command=self.modify_meals)
        self.modify_meal_button.pack()

        # Exit button
        self.exit_button = tk.Button(self.dashboard_frame, text="Exit", command=self.window.destroy)
        self.exit_button.pack()
    
    def modify_meals(self):
        #  add, remove, or modify meals for each day
        modify_meal_window = tk.Toplevel(self.window)
        modify_meal_window.title("Modify Meals")

        # select meal type
        meal_type_label = tk.Label(modify_meal_window, text="Select Meal Type:")
        meal_type_label.pack()
        self.selected_meal_type = tk.StringVar()
        meal_type_dropdown = tk.OptionMenu(modify_meal_window, self.selected_meal_type, *self.daily_meal_plan.keys())
        meal_type_dropdown.pack()

        # select meal from recipe database
        recipe_label = tk.Label(modify_meal_window, text="Select Meal from Recipe Database:")
        recipe_label.pack()
        self.selected_recipe = tk.StringVar()
        recipe_dropdown = tk.OptionMenu(modify_meal_window, self.selected_recipe, "Meal 1", "Meal 2", "Meal 3")  # Replace with actual recipe database
        recipe_dropdown.pack()

        # confirm meal selection currently does not work 
        confirm_button = tk.Button(modify_meal_window, text="Confirm", command=lambda: self.confirm_meal_selection(modify_meal_window))
        confirm_button.pack()

    def confirm_meal_selection(self, modify_meal_window):
        selected_meal_type = self.selected_meal_type.get()
        selected_recipe = self.selected_recipe.get()
        self.daily_meal_plan[selected_meal_type] = selected_recipe

        # Update labels to display selected meal
        self.breakfast_selected.config(text=self.daily_meal_plan["Breakfast"])
        self.lunch_selected.config(text=self.daily_meal_plan["Lunch"])
        self.dinner_selected.config(text=self.daily_meal_plan["Dinner"])

        modify_meal_window.destroy()

if __name__ == "__main__":
    window = tk.Tk()
    fitness_app = FitnessFillUpApp(window)
    window.mainloop()
