import tkinter as tk

class FitnessFillUpApp:
    def __init__(self, window):
        self.window = window
        self.window.title("Fitness Fill-up")
        
        # Initialize variables to store user information
        self.user_info = {}
        
        # Welcome Screen
        self.welcome_label = tk.Label(self.window, text="Welcome to Fitness Fill-up App")
        self.welcome_label.pack()
        
        self.signup_button = tk.Button(self.window, text="Sign Up", command=self.signup)
        self.signup_button.pack()
        
        self.close_button = tk.Button(self.window, text="Close", command=self.window.quit)
        self.close_button.pack()
        
        
    def signup(self):
        # User Profile Setup
        self.signup_window = tk.Toplevel(self.window)
        self.signup_window.title("User Profile Setup")

        # Form for personal information input

        self.age_label = tk.Label(self.signup_window, text="Age:")
        self.age_label.pack()
        self.age_entry = tk.Entry(self.signup_window)
        self.age_entry.pack()
        def validate_age_input():
            try:
                age = int(self.age_entry.get())
                if age <= 0:
                    raise ValueError
                return True
            except ValueError:
                tk.messagebox.showerror("Error", "Please enter a valid age.")
                return False
    
       
        self.current_weight_label = tk.Label(self.signup_window, text="Current Weight (lbs):")
        self.current_weight_label.pack()
        self.current_weight_entry = tk.Entry(self.signup_window)
        self.current_weight_entry.pack()
    def validate_weight_input():
        try:
            current_weight = float(self.current_weight_entry.get())
            if current_weight <= 0:
                raise ValueError
        except ValueError:
            tk.messagebox.showerror("Please enter a valid current weight.")
            return False
        
       
        self.height_label = tk.Label(self.signup_window, text="Height (inches):")
        self.height_label.pack()
        self.height_entry = tk.Entry(self.signup_window)
        self.height_entry.pack()
    def validate_height_input():
        try:
            height_inches = float(self.height_entry.get())
            if height_inches <= 0:
                raise ValueError
        except ValueError:
            tk.messagebox.showerror("Please enter a valid height.")
            return False
        
        
        self.calculate_button = tk.Button(self.signup_window, text="Calculate Suggested Weight", command=self.calculate_suggested_weight)
        self.calculate_button.pack()
        
        self.suggested_weight_label = tk.Label(self.signup_window, text="")
        self.suggested_weight_label.pack()
        
    def calculate_suggested_weight(self):
        current_weight = float(self.current_weight_entry.get())
        height_inches = float(self.height_entry.get())
        
        # Calculate BMI
        bmi = (current_weight / (height_inches ** 2)) * 703
        
        # Define healthy BMI range

        lower_bmi_range = 18.5
        upper_bmi_range = 24.9
       
        
        # Calculate target weight range
        lower_target_weight = lower_bmi_range * (height_inches ** 2) / 703
        upper_target_weight = upper_bmi_range * (height_inches ** 2) / 703
        
        # Suggest weight loss goal within the healthy BMI range
        suggested_target_weight = (lower_target_weight + upper_target_weight) / 2
        
        # Display the suggested weight loss goal
        self.suggested_weight_label.config(text=f"Suggested Target Weight: {suggested_target_weight:.2f} lbs")

if __name__ == "__main__":
    window = tk.Tk()
    app = FitnessFillUpApp(window)
    window.mainloop()
